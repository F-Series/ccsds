package eu.dariolucia.ccsds.cfdp.entity.indication;

import eu.dariolucia.ccsds.cfdp.entity.CfdpTransactionStatus;
import eu.dariolucia.ccsds.cfdp.protocol.pdu.FinishedPdu;
import eu.dariolucia.ccsds.cfdp.protocol.pdu.tlvs.FilestoreResponseTLV;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

/**
 * The Transaction-Finished.indication primitive shall be used to indicate to the source
 * or destination CFDP user that the transaction is complete and that the source CFDP user is
 * authorized to modify or delete any retransmission buffer (file) that it was sharing with the
 * protocol entity to conserve persistent storage space.
 *
 * Transaction-Finished.indication is generated on Notice of Completion of a file
 * transmission procedure either at the source CFDP entity or, optionally, at the destination
 * CFDP entity.
 *
 * The effect on receipt of Transaction-Finished.indication by an application is
 * undefined.
 *
 * Transaction-Finished.indication is always generated by the source CFDP entity and
 * can also be generated by the destination CFDP entity. The condition code indicates the
 * condition under which the transaction was finished.
 *
 * Ref. CCSDS 727.0-B-5, 3.4.8
 */
public class TransactionFinishedIndication implements ICfdpIndication {

    /**
     * The Transaction ID parameter shall uniquely identify a single instance of FDU
     * delivery and shall contain the ID of the source CFDP entity together with a sequence number
     * that is specific to that entity.
     *
     * At any moment, any given transaction ID is unique within the CFDP addressing
     * domain that encompasses the source CFDP entity.
     */
    private final long transactionId;

    /**
     * The Condition code parameter shall provide additional information on some change
     * in transaction status.
     */
    private final byte conditionCode;

    /**
     * The file status.
     */
    private final FinishedPdu.FileStatus fileStatus;

    /**
     * In the CCSDS Blue Book, this parameter is defined as "delivery code" in the {@link FinishedPdu}.
     *
     * If true, means that metadata, all file data, and EOF have been received, and the
     * checksum has been verified.
     */
    private final boolean dataComplete;

    /**
     * Optionally present.
     */
    private final List<FilestoreResponseTLV> filestoreResponses = new LinkedList<>();

    /**
     * Optionally present. The Status report parameter shall indicate the status of the indicated file delivery
     * transaction. The format and scope of the status report parameter are specific to the
     * implementation. It could contain information such as:
     * <ol>
     *     <li>whether the transaction is finished, canceled, suspended, or active;</li>
     *     <li>what extents of the FDU are known to have been successfully received by the
     * receiving CFDP entity;</li>
     *     <li>what extents of the FDU are known to have been transmitted by the sending CFDP
     * entity.</li>
     * </ol>
     */
    private final CfdpTransactionStatus statusReport;

    /**
     * TransactionFinishedIndication full constructor.
     *
     * @param transactionId The Transaction ID parameter shall uniquely identify a single instance of FDU delivery
     * @param conditionCode The Condition code parameter shall provide additional information on some change in the transaction status
     * @param fileStatus The file status
     * @param dataComplete True if the data is complete, otherwise false
     * @param filestoreResponses Can be null. The filestore responses if present
     * @param statusReport Can be null. Implementation specific
     */
    public TransactionFinishedIndication(long transactionId, byte conditionCode, FinishedPdu.FileStatus fileStatus, boolean dataComplete, List<FilestoreResponseTLV> filestoreResponses, CfdpTransactionStatus statusReport) {
        this.transactionId = transactionId;
        this.conditionCode = conditionCode;
        this.fileStatus = fileStatus;
        this.dataComplete = dataComplete;
        this.statusReport = statusReport;
        if(filestoreResponses != null) {
            this.filestoreResponses.addAll(filestoreResponses);
        }
    }

    public long getTransactionId() {
        return transactionId;
    }

    public byte getConditionCode() {
        return conditionCode;
    }

    public FinishedPdu.FileStatus getFileStatus() {
        return fileStatus;
    }

    public boolean isDataComplete() {
        return dataComplete;
    }

    public List<FilestoreResponseTLV> getFilestoreResponses() {
        return Collections.unmodifiableList(filestoreResponses);
    }

    public CfdpTransactionStatus getStatusReport() {
        return statusReport;
    }

    @Override
    public String toString() {
        return "TransactionFinishedIndication{" +
                "transactionId=" + transactionId +
                ", conditionCode=" + conditionCode +
                ", fileStatus=" + fileStatus +
                ", dataComplete=" + dataComplete +
                ", filestoreResponses=" + filestoreResponses +
                ", statusReport=" + statusReport +
                '}';
    }
}
