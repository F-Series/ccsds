/*
 * Copyright 2018-2019 Dario Lucia (https://www.dariolucia.eu)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package eu.dariolucia.ccsds.tmtc.datalink.pdu;

import eu.dariolucia.ccsds.tmtc.util.StringUtil;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class TmTransferFrameTest {

    private static byte[] FIRST_FRAME = StringUtil.toByteArray
    private static byte[] SECOND_FRAME = StringUtil.toByteArray

    @Test
    public void testTmTransferFrameDecoding() {
        TmTransferFrame ttf = new TmTransferFrame(FIRST_FRAME, false);
        assertEquals(123, ttf.getSpacecraftId());
        assertEquals(2, ttf.getVirtualChannelId());
        assertEquals(true, ttf.isOcfPresent());
        assertEquals(3, ttf.getMasterChannelFrameCount());
        assertEquals(178, ttf.getVirtualChannelFrameCount());
        assertEquals(true, ttf.isSecondaryHeaderPresent());
        assertEquals(false, ttf.isSynchronisationFlag());
        assertEquals(false, ttf.isPacketOrderFlag());
        assertEquals(3, ttf.getSegmentLengthIdentifier());
        assertEquals(0, ttf.getSecondaryHeaderVersionNumber());
        assertEquals(3, ttf.getSecondaryHeaderLength());

        ttf = new TmTransferFrame(SECOND_FRAME, false);
        assertEquals(123, ttf.getSpacecraftId());
        assertEquals(2, ttf.getVirtualChannelId());
        assertEquals(true, ttf.isOcfPresent());
    }
}